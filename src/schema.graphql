interface Athlete {
  box: String
  name: String
  scores: [Score]
}

scalar Date

type RegularAthlete implements Athlete {
  id: ID!
  box: String
  leaderboards: [Leaderboard]
  name: String
  scores: [Score]
}

type ScoreboardAthlete implements Athlete {
  box: String
  name: String
  scores: [Score]
}

type Competition {
  id: ID!
  leaderboards: [Leaderboard]
  name: String
  venue: Venue
}

type Leaderboard {
  id: ID!
  athletes: [RegularAthlete]
  category: String
  competition: Competition
  division: LEADERBOARD_DIVISION
  gender: LEADERBOARD_GENDER
  name: String
  workouts: [Workout]
}

type Score {
  id: ID!
  athlete: RegularAthlete
  rank: Int
  scaled: Boolean
  value: Int
  workout: Workout
}

type Scoreboard {
  athletes: [ScoreboardAthlete]
  workouts: [Workout]
}

type Venue {
  id: ID!
  competitions: [Competition]
  description: String
  name: String
}

type Workout {
  id: ID!
  description: String
  leaderboard: Leaderboard
  standards: String
  name: String
  scores(sort: SCORES_SORT, dir: SORT_DIR): [Score]
  type: WORKOUT_TYPE
}

type AuthToken {
  token: String!
}

type Query {
  athletes(limit: Int, offset: Int): [RegularAthlete]
  athlete(id: ID!): RegularAthlete
  competitions(limit: Int, offset: Int): [Competition]
  competition(id: ID!): Competition
  leaderboards(competitionId: ID!): [Leaderboard]
  leaderboard(id: ID!): Leaderboard
  scoreboard(leaderboardId: ID!): Scoreboard
  scores(workoutId: ID!, sort: SCORES_SORT, dir: SORT_DIR): [Score]
  venues(limit: Int, offset: Int): [Venue]
  venue(id: ID!): Venue
  workouts(leaderboardId: ID!): [Workout]
  workout(id: ID!): Workout
}

type Mutation {
  authenticate(email: String!, password: String!): AuthToken!
}

enum LEADERBOARD_DIVISION {
  rx
  scaled
}

enum LEADERBOARD_GENDER {
  female
  male
}

enum WORKOUT_TYPE {
  amrap
  time
  weight
}

enum SCORES_SORT {
  rank
  scaled
  value
}

enum SORT_DIR {
  asc
  desc
}
