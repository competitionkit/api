type Competition {
  id: ID!
  leaderboards: [Leaderboard]
  name: String
  venue: Venue
}

type Leaderboard {
  id: ID!
  category: String
  competition: Competition
  gender: String
  workouts: [Workout]
}

type Score {
  id: ID!
  rank: Int
  scaled: Boolean
  value: Int
  workout: Workout
}

type Venue {
  id: ID!
  competitions: [Competition]
  description: String
  name: String
}

type Workout {
  id: ID!
  description: String
  leaderboard: Leaderboard
  name: String
  scores: [Score]
  type: WORKOUT_TYPE
}

type AuthToken {
  token: String!
}

type Query {
  competitions(limit: Int, offset: Int): [Competition]
  competition(id: ID!): Competition
  leaderboards(competitionId: ID!): [Leaderboard]
  venues(limit: Int, offset: Int): [Venue]
  venue(id: ID!): Venue
  workouts(leaderboardId: ID!): [Workout]
  workout(id: ID!): Workout
}

type Mutation {
  authenticate(email: String!, password: String!): AuthToken!
}

enum WORKOUT_TYPE {
  amrap
  time
  weight
}
